lda_bankruptcy$terms
lda_bankruptcy
# Sample Plots
par(mfrow = c(2, 2))
plot(bankruptcy_df$X1, bankruptcy_df$X2,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X2",
main = "Bankruptcy - X1 against X2")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
plot(bankruptcy_df$X1, bankruptcy_df$X3,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X3",
main = "Bankruptcy - X1 against X3")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
# Sample Plots
par(mfrow = c(2, 1))
plot(bankruptcy_df$X1, bankruptcy_df$X2,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X2",
main = "Bankruptcy - X1 against X2")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
plot(bankruptcy_df$X1, bankruptcy_df$X3,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X3",
main = "Bankruptcy - X1 against X3")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
# Sample Plots
par(mfrow = c(3, 2))
plot(bankruptcy_df$X1, bankruptcy_df$X2,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X2",
main = "Bankruptcy - X1 against X2")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
plot(bankruptcy_df$X1, bankruptcy_df$X3,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X3",
main = "Bankruptcy - X1 against X3")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
plot(bankruptcy_df$X1, bankruptcy_df$X4,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X4",
main = "Bankruptcy - X1 against X4")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
plot(bankruptcy_df$X2, bankruptcy_df$X3,
col = bankruptcy_df$color,
xlab = "X2", ylab = "X3",
main = "Bankruptcy - X2 against X3")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
plot(bankruptcy_df$X2, bankruptcy_df$X3,
col = bankruptcy_df$color,
xlab = "X2", ylab = "X3",
main = "Bankruptcy - X2 against X3")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
plot(bankruptcy_df$X3, bankruptcy_df$X4,
col = bankruptcy_df$color,
xlab = "X3", ylab = "X4",
main = "Bankruptcy - X3 against X4")
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
gmean_X12 <- lda_bankruptcy_X12$prior %*% lda_bankruptcy_X12$means
# LDA
lda_bankruptcy_X12 <- lda(Group ~ X1 + X2, data = bankruptcy_df,
prior = c(1, 1)/2)
plda_bankruptcy_X12 <- predict(object = lda_bankruptcy_X12)
lda_bankruptcy_X12
# APER
cont_table_X12 <- table(bankruptcy_df$Group, plda_bankruptcy_X12$class,
dnn = c("Actual", "Predicted"))
APER_X12 <- (cont_table_X12[1, 2] + cont_table_X12[2, 1])/(n0+n1)
# APER
cont_table_X12 <- table(bankruptcy_df$Group, plda_bankruptcy_X12$class,
dnn = c("Actual", "Predicted"))
APER_X12 <- (cont_table_X12[1, 2] + cont_table_X12[2, 1])/(n0+n1)
# APER
cont_table_X12 <- table(bankruptcy_df$Group, plda_bankruptcy_X12$class,
dnn = c("Actual", "Predicted"))
APER_X12 <- (cont_table_X12[1, 2] + cont_table_X12[2, 1])/(n0+n1)
# APER
cont_table_X12 <- table(bankruptcy_df$Group, plda_bankruptcy_X12$class,
dnn = c("Actual", "Predicted"))
APER_X12 <- (cont_table_X12[1, 2] + cont_table_X12[2, 1])/(n0+n1)
# E(AER)
ldaLB_bankruptcy_X12 <- lda(Group ~ X1 + X2,
data = bankruptcy_df, prior = c(1, 1)/2, CV = TRUE)
cont_table_LB_X12 <- table(bankruptcy_df$Group, ldaLB_bankruptcy_X12$class,
dnn = c("Actual", "Predicted"))
EAER_X12 <- (cont_table_LB_X12[1, 2] + cont_table_LB_X12[2, 1])/(n0+n1)
cont_table_LB_X12
gmean_X12 <- lda_bankruptcy_X12$prior %*% lda_bankruptcy_X12$means
const_X12 <- as.numeric(gmean %*%lda_bankruptcy_X12$scaling)
gmean_X12 <- lda_bankruptcy_X12$prior %*% lda_bankruptcy_X12$means
const_X12 <- as.numeric(gmean_X12 %*%lda_bankruptcy_X12$scaling)
slope_X12 <- - lda_bankruptcy_X12$scaling[1] / lda_bankruptcy_X12$scaling[2]
intercept_X12 <- const_X12 / lda_bankruptcy_X12$scaling[2]
#Plot decision boundary
plot(bankruptcy_df[,1:2],pch=rep(c(18,20),each=50),col=rep(c(2,4),each=50))
abline(intercept_X12, slope_X12)
legend("topright",legend=c("Bankrupt","Non-Bankrupt"),pch=c(18,20),col=c(2,4))
gmean_X12 <- lda_bankruptcy_X12$prior %*% lda_bankruptcy_X12$means
const_X12 <- as.numeric(gmean_X12 %*%lda_bankruptcy_X12$scaling)
slope_X12 <- - lda_bankruptcy_X12$scaling[1] / lda_bankruptcy_X12$scaling[2]
intercept_X12 <- const_X12 / lda_bankruptcy_X12$scaling[2]
#Plot decision boundary
#plot(bankruptcy_df[,1:2],pch=rep(c(18,20),each=50),col=rep(c(2,4),each=50))
plot(bankruptcy_df$X1, bankruptcy_df$X2,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X2",
main = "Bankruptcy - X1 against X2")
abline(intercept_X12, slope_X12)
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
#legend("topright",legend=c("Bankrupt","Non-Bankrupt"),pch=c(18,20),col=c(2,4))
# LDA using X1 and X3
lda_bankruptcy_X13 <- lda(Group ~ X1 + X3, data = bankruptcy_df,
prior = c(1, 1)/2)
plda_bankruptcy_X13 <- predict(object = lda_bankruptcy_X13)
lda_bankruptcy_X13
# APER
cont_table_X13 <- table(bankruptcy_df$Group, plda_bankruptcy_X13$class,
dnn = c("Actual", "Predicted"))
APER_X13 <- (cont_table_X13[1, 2] + cont_table_X13[2, 1])/(n0+n1)
cont_table_X13
# E(AER)
ldaLB_bankruptcy_X13 <- lda(Group ~ X1 + X3,
data = bankruptcy_df, prior = c(1, 1)/2, CV = TRUE)
cont_table_LB_X13 <- table(bankruptcy_df$Group, ldaLB_bankruptcy_X12$class,
dnn = c("Actual", "Predicted"))
EAER_X13 <- (cont_table_LB_X13[1, 2] + cont_table_LB_X13[2, 1])/(n0+n1)
cont_table_LB_X13
# Calculate Decision Line
gmean_X13 <- lda_bankruptcy_X13$prior %*% lda_bankruptcy_X13$means
const_X13 <- as.numeric(gmean_X13 %*%lda_bankruptcy_X13$scaling)
slope_X13 <- - lda_bankruptcy_X13$scaling[1] / lda_bankruptcy_X13$scaling[2]
intercept_X13 <- const_X13 / lda_bankruptcy_X13$scaling[2]
# Plot Decision Boundary
plot(bankruptcy_df$X1, bankruptcy_df$X3,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X3",
main = "LDA Bankruptcy - X1 against X3")
abline(intercept_X13, slope_X13)
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
# LDA using X1 and X4
lda_bankruptcy_X14 <- lda(Group ~ X1 + X4, data = bankruptcy_df,
prior = c(1, 1)/2)
plda_bankruptcy_X14 <- predict(object = lda_bankruptcy_X14)
lda_bankruptcy_X14
# APER
cont_table_X14 <- table(bankruptcy_df$Group, plda_bankruptcy_X14$class,
dnn = c("Actual", "Predicted"))
APER_X14 <- (cont_table_X14[1, 2] + cont_table_X14[2, 1])/(n0+n1)
cont_table_X14
# Calculate Decision Line
gmean_X14 <- lda_bankruptcy_X14$prior %*% lda_bankruptcy_X14$means
const_X14 <- as.numeric(gmean_X14 %*%lda_bankruptcy_X14$scaling)
slope_X14 <- - lda_bankruptcy_X14$scaling[1] / lda_bankruptcy_X14$scaling[2]
intercept_X14 <- const_X14 / lda_bankruptcy_X14$scaling[2]
# Plot Decision Boundary
plot(bankruptcy_df$X1, bankruptcy_df$X4,
col = bankruptcy_df$color,
xlab = "X1", ylab = "X4",
main = "LDA Bankruptcy - X1 against X4")
abline(intercept_X14, slope_X14)
legend("topleft", legend = levels(bankruptcy_df$Group), pch = 16,
col = c("#F8766D", "#00B076"))
# E(AER)
ldaLB_bankruptcy_X14 <- lda(Group ~ X1 + X4,
data = bankruptcy_df, prior = c(1, 1)/2, CV = TRUE)
cont_table_LB_X14 <- table(bankruptcy_df$Group, ldaLB_bankruptcy_X14$class,
dnn = c("Actual", "Predicted"))
EAER_X14 <- (cont_table_LB_X14[1, 2] + cont_table_LB_X14[2, 1])/(n0+n1)
cont_table_LB_X14
setwd("~/Nikhila/Spring 2020/STA 135/Project")
shiny::runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
shiny::runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
if (is.null(input$mult_ingredients)) {
print("Choose an ingredient or category!")
} else {
print(input$mult_ingredients)
url <- str_glue("https://www.thecocktaildb.com/api/json/v2/{api_key}/filter.php?i={ingr}",
api_key = api_key,
ingr = str_replace_all(paste(input$mult_ingredients, collapse = ','),
pattern = " ", replacement = "_"))
if (is.null(fromJSON(url)$drinks)) {
print("No drinks with those ingredients found!")
} else {
drink_list <- fromJSON(url)$drinks
selectInput("recipes", label = "All Recipes Matching", choices = drink_list$strDrink)
}
}
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
install.packages(c("httpuv", "later", "lubridate", "rsample", "SQUAREM", "vctrs"))
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
drink_details_df
drink_details_df <- read.csv("drink_details.csv")
drink_details_df
runApp()
n
n
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
drinks_list_info <- unique(drinks_list_info)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('C:/Users/Joe/Downloads/q3.R')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
# Application title
headerPanel("Cocktail Recipe App"),
sidebarLayout(
sidebarPanel(
wellPanel(
h5("Give me a random recipe:"),
actionButton("random", "Random!")
),
br(),
br(),
radioButtons("filterBy",
label = "Find drinks by:",
choices = c("Ingredients", "Type of Drink"),
selected = NULL),
conditionalPanel(
condition = "input.filterBy == 'Ingredients'",
selectizeInput("mult_ingredients",
label = "Ingredients",
choices = ingreds,
multiple = TRUE),
checkboxInput("onlySelectedIngredients",
label = "Show recipes with only these ingredients")
),
#convert to boxes/kinda like checkboxes and action buttons combined
conditionalPanel(
condition = "input.filterBy == 'Type of Drink'",
selectizeInput("ifAlcohol",
label = "Type of Beverage",
choices = c(Any = 'Any', ifAlcohol_options),
multiple = FALSE)
),
uiOutput("recipesMatchingLink")
),
mainPanel(
tabsetPanel(type = "tabs",
tabPanel("Recipe", br(),
fluidRow(
column(6,
textOutput("randomRecipeTitle"), br(),
textOutput("recipeTitle"),
wellPanel(tableOutput("randomRecipeIngr_Measure")),
wellPanel(tableOutput("recipeIngr_Measure"),
textOutput("randomRecipeInstructions"),
textOutput("recipeInstructions")
),
column(6,
htmlOutput("randomRecipeImage"),
htmlOutput("recipeImage")
)
)
),
tabPanel("Stats", br(),
fluidRow(
column(4),
column(8, plotOutput("numIngredPlot")))
)
)
)
),
tags$head(tags$style("#recipeTitle{color: black;
font-size: 18px;
font-style: bold;}"
)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Ingredients list for selection from drop down
fromJSON(str_glue("https://www.thecocktaildb.com/api/json/v2/{api_key}/list.php?i=list",
api_key = api_key))$drinks %>% sort(strIngredient1)
fromJSON(str_glue("https://www.thecocktaildb.com/api/json/v2/{api_key}/list.php?i=list",
api_key = api_key))$drinks %>% sort(strIngredient1)
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/cocktail-web-app')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
print("No matching drinks found!"),
br()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
install.packages("shinyjs")
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
drink_details_df <- read.csv("drink_details.csv")
drink_details_df
drink_details_df
(drink_details_df <- drink_details_df %>% select(idDrink, strDrink, strCategory, strAlcoholic, strGlass, strInstructions, strDrinkThumb, strIngredient1:strIngredient15, strMeasure1:strMeasure15) %>%
mutate(across(starts_with("str"), na_if, "NA")) %>%
mutate(across(starts_with("str"), na_if, "<NA>")) %>%
mutate(across(starts_with("str"), na_if, "")) %>%
mutate(across(starts_with("str"), na_if, '')))
drink_details_df %>%
select(strDrink) %>% mutate(firstLetter = substr(., 1, 1))
drink_details_df %>%
select(strDrink) %>% mutate(firstLetter = substr(strDrink, 1, 1))
byLetter <- drink_details_df %>%
select(strDrink) %>% mutate(firstLetter = substr(strDrink, 1, 1))
byLetter <- drink_details_df %>%
select(idDrink, strDrink) %>% mutate(firstLetter = substr(strDrink, 1, 1))
ggplot(data = byLetter, aes(x = firstLetter, fill = factor(ifelse(firstLetter == byLetter$firstLetter[[500]], "Highlighted", "Normal"))))  +
geom_bar(show.legend = FALSE) + scale_fill_manual(name = "firstLetter", values=c("#7B0828","grey50")) +
xlab("Letter") +
ylab("Number of Drinks") +
ggtitle("Drinks by Letter")
ggplot(data = byLetter, aes(x = firstLetter, fill = factor(ifelse(firstLetter == byLetter$firstLetter[[200]], "Highlighted", "Normal"))))  +
geom_bar(show.legend = FALSE) + scale_fill_manual(name = "firstLetter", values=c("#7B0828","grey50")) +
xlab("Letter") +
ylab("Number of Drinks") +
ggtitle("Drinks by Letter")
byLetter <- drink_details_df %>%
select(idDrink, strDrink) %>% mutate(firstLetter = substr(strDrink, 1, 1))
ggplot(data = byLetter, aes(x = firstLetter, fill = factor(ifelse(firstLetter == byLetter$firstLetter[[200]], "Highlighted", "Normal"))))  +
geom_bar(show.legend = FALSE) + scale_fill_manual(name = "firstLetter", values=c("#7B0828","grey50")) +
xlab("Letter") +
ylab("Number of Drinks") +
ggtitle("Drinks by First Character")
byLetter <- drink_details_df %>%
select(idDrink, strDrink) %>% mutate(firstLetter = substr(strDrink, 1, 1))
ggplot(data = byLetter, aes(x = firstLetter, fill = factor(ifelse(firstLetter == byLetter$firstLetter[[200]], "Highlighted", "Normal"))))  +
geom_bar(show.legend = FALSE) + scale_fill_manual(name = "firstLetter", values=c("#7B0828","grey50")) +
xlab("Character") +
ylab("Number of Drinks") +
ggtitle("Drinks by First Character")
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp()
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
runApp('~/Nikhila/Spring 2020/STA 141B/sta141b-project/project2')
shiny::runApp()
# Get all cocktails details into a DF
readRenviron(".Renviron")
api_key = Sys.getenv("API_KEY")
letters_and_num <- c(0:9, letters, "'")
drinks_df <- data.frame()
for (i in letters_and_num) {
url <- str_glue("https://www.thecocktaildb.com/api/json/v2/{api_key}/search.php?f={letter}",
api_key = api_key, letter = i)
drinks_details <- fromJSON(url)$drinks
drinks_df <- rbind(drinks_df, drinks_details)
}
write.csv(drinks_df, "drink_details.csv", row.names = FALSE)
# Get all cocktails details into a DF
readRenviron(".Renviron")
api_key = Sys.getenv("API_KEY")
letters_and_num <- c(0:9, letters, "'")
drinks_df <- data.frame()
for (i in letters_and_num) {
url <- str_glue("https://www.thecocktaildb.com/api/json/v2/{api_key}/search.php?f={letter}",
api_key = api_key, letter = i)
drinks_details <- fromJSON(url)$drinks
drinks_df <- rbind(drinks_df, drinks_details)
}
write.csv(drinks_df, "drink_details.csv", row.names = FALSE)
runApp()
